{"version":3,"sources":["webpack:///src/app/auth/auth-routing.module.ts","webpack:///src/app/auth/signup/signup.component.html","webpack:///src/app/auth/signup/signup.component.ts","webpack:///src/app/auth/auth.module.ts","webpack:///src/app/auth/login/login.component.html","webpack:///src/app/auth/login/login.component.ts"],"names":["routes","path","component","AuthRoutingModule","forChild","SignupComponent","authService","isLoading","authStatusSub","getAuthStatusListener","subscribe","authStatus","form","invalid","console","log","value","createUser","email","password","unsubscribe","AuthModule","LoginComponent","login"],"mappings":"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","file":"auth-auth-module-es5.js","sourcesContent":["import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { LoginComponent } from \"./login/login.component\";\nimport { SignupComponent } from \"./signup/signup.component\";\n\nconst routes: Routes = [\n  { path: 'login', component: LoginComponent },\n  { path: 'signup', component: SignupComponent }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes)\n  ],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule {}\n","<mat-card>\n  <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n  <form (submit)=\"onSignup(signupForm)\" #signupForm=\"ngForm\" *ngIf=\"!isLoading\">\n    <mat-form-field>\n      <input matInput\n        type=\"email\"\n        name=\"email\"\n        ngModel\n        placeholder=\"E-mail\"\n        #emailInput=\"ngModel\"\n        required email\n        >\n        <mat-error *ngIf=\"emailInput.invalid\">Please enter a valid email!</mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n      <input matInput\n        type=\"password\"\n        name=\"password\"\n        ngModel\n        placeholder=\"Password\"\n        #passwordInput\n        required\n      >\n      <mat-error *ngIf=\"!passwordInput.invalid\">Please enter a valid password!</mat-error>\n    </mat-form-field>\n    <button\n      mat-raised-button\n      color=\"accent\"\n      type=\"submit\"\n      *ngIf=\"!isLoading\">\n        Signup\n    </button>\n  </form>\n</mat-card>\n\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { AuthService } from '../auth.service';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit, OnDestroy {\n  isLoading = false;\n  private authStatusSub: Subscription;\n\n  constructor(public authService: AuthService) { }\n\n  ngOnInit(): void {\n    this.authStatusSub = this.authService.getAuthStatusListener().subscribe(\n      authStatus => {\n        this.isLoading = false;\n      }\n    );\n  }\n\n  onSignup(form: NgForm) {\n    if (form.invalid) {\n      console.log(form.value);\n      return;\n    }\n    this.isLoading = true;\n    this.authService.createUser(form.value.email, form.value.password);\n  }\n   ngOnDestroy() {\n     this.authStatusSub.unsubscribe();\n   }\n\n}\n","import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\nimport { AngularMaterialModule } from \"../angular-meterial.module\";\nimport { AuthRoutingModule } from \"./auth-routing.module\";\n\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    SignupComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    AngularMaterialModule,\n    AuthRoutingModule\n  ]\n})\nexport class AuthModule {}\n","<mat-card>\n  <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n  <form (submit)=\"onLogin(loginForm)\" #loginForm=\"ngForm\" *ngIf=\"!isLoading\">\n    <mat-form-field>\n      <input matInput\n        type=\"email\"\n        name=\"email\"\n        ngModel\n        placeholder=\"E-mail\"\n        #emailInput=\"ngModel\"\n        required email\n        >\n        <mat-error *ngIf=\"emailInput.invalid\">Please enter a valid email!</mat-error>\n    </mat-form-field>\n\n    <mat-form-field>\n      <input matInput\n        type=\"password\"\n        name=\"password\"\n        ngModel\n        placeholder=\"Password\"\n        #passwordInput\n        required\n      >\n      <mat-error *ngIf=\"!passwordInput.invalid\">Please enter a valid password!</mat-error>\n    </mat-form-field>\n    <button\n      mat-raised-button\n      color=\"accent\"\n      type=\"submit\"\n      *ngIf=\"!isLoading\">\n        Login\n    </button>\n  </form>\n</mat-card>\n\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { AuthService } from '../auth.service';\n\n@Component({\n  // selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n  isLoading = false;\n  private authStatusSub: Subscription;\n\n  constructor(public authService: AuthService) { }\n\n  ngOnInit(): void {\n    this.authStatusSub = this.authService.getAuthStatusListener().subscribe(\n      authStatus => {\n        this.isLoading = false;\n      }\n    );\n  }\n\n  onLogin(form: NgForm) {\n    console.log(form.value);\n    if (form.invalid) {\n      return;\n    }\n    this.isLoading = true;\n    this.authService.login(form.value.email, form.value.password);\n  }\n  ngOnDestroy() {\n    this.authStatusSub.unsubscribe();\n  }\n\n}\n"]}