{"version":3,"sources":["webpack:///src/app/posts/post-list/post-list.component.html","webpack:///src/app/posts/post-list/post-list.component.ts","webpack:///src/app/posts/posts.module.ts","webpack:///src/environments/environment.ts","webpack:///src/app/error/error.component.ts","webpack:///src/app/error/error.component.html","webpack:///src/app/auth/auth.guard.ts","webpack:///src/app/error-interceptor.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/posts/posts.service.ts","webpack:///src/app/app.module.ts","webpack:///src/app/header/header.component.html","webpack:///src/app/header/header.component.ts","webpack:///src/app/posts/post-create/mime-type.validator.ts","webpack:///src/app/auth/auth-interceptor.ts","webpack:///src/app/auth/auth.service.ts","webpack:///src/app/angular-meterial.module.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/posts/post-create/post-create.component.ts","webpack:///src/app/posts/post-create/post-create.component.html","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["PostListComponent","postService","authService","posts","isLoading","totalPosts","postsPerPage","currentPage","pageSizeOptions","userIsAuthenticated","getPosts","userId","getUserId","postSub","getPostUpdateListener","subscribe","postData","postCount","getIsAuth","authStatusSub","getAuthStatusListener","isAuthenticated","postId","deletePost","pageData","console","log","pageIndex","pageSize","unsubscribe","PostsModule","environment","production","backendUrl","ErrorComponent","data","message","AuthGuard","router","route","state","isAuth","navigate","ErrorInterceptor","dialog","req","next","handle","pipe","error","errorMessage","open","AppComponent","autoAuthUser","PostsService","http","postsUpdated","queryParams","get","map","post","title","content","id","_id","imagePath","creator","maxPost","maxPosts","transformedPostData","asObservable","image","FormData","append","respData","put","response","AppModule","provide","useClass","multi","HeaderComponent","authListenerSubs","logout","mimeType","control","value","file","fileReader","FileReader","frObs","create","observer","addEventListener","arr","Uint8Array","result","subarray","header","isValid","i","length","toString","invalidMimeType","complete","readAsArrayBuffer","AuthInterceptor","authToken","getToken","authRequest","clone","headers","set","AuthService","authStatusListener","token","email","password","authData","expiresInDuration","expiresIn","setAuthTimer","now","Date","expirationDate","getTime","saveAuthData","authInformation","getAuthData","clearTimeout","tokenTimer","clearAuthData","duration","setTimeout","localStorage","setItem","toISOString","removeItem","getItem","AngularMaterialModule","routes","path","component","canActivate","loadChildren","then","m","AuthModule","AppRoutingModule","forRoot","PostCreateComponent","enteredTitle","enteredContent","isloading","mode","authStatus","form","validators","required","minLength","asyncValidators","paramMap","has","getPost","setValue","event","target","files","patchValue","updateValueAndValidity","reader","onload","imagePreview","readAsDataURL","invalid","addPost","updatePost","reset","bootstrapModule","err","webpackEmptyAsyncContext","Promise","resolve","e","Error","code","keys","module","exports"],"mappings":"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","file":"main-es5.js","sourcesContent":["\n<!-- <p>{{ newPost }}</p> -->\n<mat-spinner *ngIf=\"isLoading\"></mat-spinner>\n<mat-accordion  multi=\"true\" *ngIf=\"posts.length > 0 && !isLoading\">\n  <mat-expansion-panel *ngFor=\"let post of posts\">\n    <mat-expansion-panel-header>\n      {{ post.title }}\n    </mat-expansion-panel-header>\n    <div class=\"post-image\">\n      <img [src]=\"post.imagePath\" [alt]=\"post.title\">\n    </div>\n    <p>{{ post.content }}</p>\n    <mat-action-row *ngIf=\"userIsAuthenticated && userId === post.creator\">\n      <a mat-button color=\"primary\" [routerLink]=\"['/edit', post.id]\">EDIT</a>\n      <button mat-button color=\"warn\" (click)=\"onDelete(post.id)\">DELETE</button>\n     </mat-action-row>\n  </mat-expansion-panel>\n</mat-accordion>\n<mat-paginator [length]=\"totalPosts\"\n[pageSize]=\"postsPerPage\"\n[pageSizeOptions]=\"pageSizeOptions\"\n(page)=\"onChangePage($event)\"\n*ngIf=\"posts.length > 0\"></mat-paginator>\n<p class=\"info-text mat-body-1\" *ngIf=\"posts.length <= 0 && !isLoading\">No Posts added jet!</p>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { PageEvent } from '@angular/material/paginator';\nimport { Subscription } from 'rxjs'\nimport { AuthService } from 'src/app/auth/auth.service';\nimport { Post } from '../post.model';\nimport { PostsService } from '../posts.service';\n\n\n@Component({\n  selector: 'app-post-list',\n  templateUrl: './post-list.component.html',\n  styleUrls: ['./post-list.component.css']\n})\nexport class PostListComponent implements OnInit, OnDestroy {\n  // posts = [\n  //   {title: 'First post', content: 'This is post number 1 '},\n  //   {title: 'Second post', content: 'This is post number 2 '},\n  //   {title: 'Third post', content: 'This is post number 3 '},\n\n  // ];\n  posts: Post[] = [];\n  isLoading = false;\n  totalPosts = 0;\n  postsPerPage = 10;\n  currentPage = 1;\n  pageSizeOptions = [1, 2, 5, 10, 20, 100];\n  userIsAuthenticated = false;\n  userId: string;\n  private postSub: Subscription;\n  private authStatusSub: Subscription;\n\n  constructor(public postService: PostsService, private authService: AuthService) { }\n\n  ngOnInit(): void {\n    this.isLoading = true;\n    this.postService.getPosts(this.postsPerPage, this.currentPage);\n    this.userId = this.authService.getUserId();\n    this.postSub = this.postService.getPostUpdateListener()\n    .subscribe((postData: {posts: Post[], postCount: number }) => {\n      this.isLoading = false;\n      this.totalPosts = postData.postCount;\n      this.posts = postData.posts;\n    });\n    this.userIsAuthenticated = this.authService.getIsAuth();\n    this.authStatusSub = this.authService.getAuthStatusListener()\n    .subscribe(isAuthenticated => {\n      this.userIsAuthenticated = isAuthenticated;\n      this.userId = this.authService.getUserId();\n    });\n  }\n\n  onDelete(postId: string) {\n    this.isLoading = true;\n    this.postService.deletePost(postId).subscribe(() => {\n      this.postService.getPosts(this.postsPerPage, this.currentPage);\n    }, () => {\n      this.isLoading = false;\n    });\n  }\n\n  onChangePage(pageData: PageEvent) {\n    console.log(pageData);\n    this.isLoading = true;\n    this.currentPage = pageData.pageIndex + 1;\n    this.postsPerPage = pageData.pageSize;\n    this.postService.getPosts(this.postsPerPage, this.currentPage);\n  }\n\n  ngOnDestroy() {\n    this.postSub.unsubscribe();\n    this.authStatusSub.unsubscribe();\n  }\n\n}\n","import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from \"@angular/router\";\nimport { AngularMaterialModule } from \"../angular-meterial.module\";\n\nimport { PostCreateComponent } from './post-create/post-create.component';\nimport { PostListComponent } from './post-list/post-list.component';\n\n@NgModule({\n  declarations: [\n    PostCreateComponent,\n    PostListComponent\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    AngularMaterialModule,\n    RouterModule\n  ]\n\n})\nexport class PostsModule {}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  backendUrl: \"http://localhost:3300/api/\"\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  templateUrl: './error.component.html',\n  styleUrls: ['./error.component.css']\n})\nexport class ErrorComponent implements OnInit {\n  message = 'An unknown error occured!';\n  constructor(@Inject(MAT_DIALOG_DATA) public data: {message: string}) { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h1 mat-dialog-title>An Error Occurred!</h1>\n<div mat-dialog-content>\n  <p class=\"mat-body-1\">{{ data.message }}</p>\n</div>\n<div mat-dialog-actions>\n  <button mat-button mat-dialog-close>Okay</button>\n</div>\n\n","import { Injectable } from \"@angular/core\";\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from \"@angular/router\";\nimport { Observable } from \"rxjs\";\nimport { AuthService } from \"./auth.service\";\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n\n  constructor(\n    private authService: AuthService,\n    private router: Router) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean | Observable<boolean> | Promise<boolean> {\n    const isAuth = this.authService.getIsAuth();\n    if (!isAuth) {\n      this.router.navigate(['/auth/login']);\n    }\n    return isAuth;\n  }\n}\n","import {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpErrorResponse\n} from \"@angular/common/http\";\nimport { catchError } from \"rxjs/operators\";\nimport { throwError } from \"rxjs\";\nimport { Injectable } from \"@angular/core\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { ErrorComponent } from \"./error/error.component\";\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n\n  constructor(private dialog: MatDialog) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler ) {\n    return next.handle(req).pipe(\n      catchError( (error: HttpErrorResponse) => {\n        console.log(error)\n        let errorMessage = \"An unknown error occurred!\";\n        if (error.error.message) {\n          errorMessage = error.error.message;\n        }\n        this.dialog.open(ErrorComponent, {data: {message: errorMessage}});\n        return throwError(error);\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from './auth/auth.service';\nimport { Post } from './posts/post.model';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit{\n\n  constructor(private authService: AuthService){}\n\n  ngOnInit() {\n    this.authService.autoAuthUser();\n  }\n  // onPostAdded(post) {\n  //   this.storedPosts.push(post);\n  // }\n}\n","<app-header></app-header>\n<main>\n  <router-outlet></router-outlet>\n</main>\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators'\nimport { Post } from './post.model'\nimport { Router } from '@angular/router';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostsService {\n  private posts: Post[] = [];\n  private postsUpdated = new Subject<{posts: Post[], postCount: number}>();\n\n  constructor(private http: HttpClient,\n              private router: Router) { }\n\n  getPosts(postsPerPage: number, currentPage: number) {\n    const queryParams = `?pagesize=${postsPerPage}&page=${currentPage}`;\n    this.http\n    .get<{\n      message: string,\n       posts: any,\n      maxPosts: number }>(\n        environment.backendUrl + 'posts' + queryParams\n    )\n    .pipe(\n      map((postData) => {\n        return {\n          posts: postData.posts.map(post => {\n            return {\n              title: post.title,\n              content: post.content,\n              id: post._id,\n              imagePath: post.imagePath,\n              creator: post.creator\n            };\n          }),\n          maxPost: postData.maxPosts\n        };\n      })\n    )\n    .subscribe(transformedPostData => {\n      //console.log(transformedPostData);\n      this.posts = transformedPostData.posts;\n      this.postsUpdated.next({\n        posts: [...this.posts],\n        postCount: transformedPostData.maxPost\n      });\n      console.log('Posts updated!');\n    });\n  }\n\n  getPostUpdateListener() {\n    return this.postsUpdated.asObservable();\n  }\n\n  getPost(id: string) {\n    return this.http.get<{\n      _id: string,\n      title: string,\n      content: string,\n      imagePath: string,\n      creator: string\n    }>(environment.backendUrl + 'posts/' + id);\n  }\n\n  addPost(title: string, content: string, image: File) {\n    const postData = new FormData();\n    postData.append(\"title\", title);\n    postData.append(\"content\", content);\n    postData.append(\"image\", image, title);\n\n    this.http.post<{ message: string, post: Post }>(\n      environment.backendUrl + 'posts',\n       postData\n      )\n      .subscribe((respData) => {\n        console.log(respData.message);\n\n        this.router.navigate([\"/\"]);\n      });\n  }\n\n  updatePost(id: string, title: string, content: string, image: File | string ) {\n    let postData: Post | FormData;\n    if (typeof(image) === 'object') {\n      postData = new FormData();\n      postData.append(\"id\", id);\n      postData.append(\"title\", title);\n      postData.append(\"content\", content);\n      postData.append(\"image\", image, title);\n    }\n    else {\n      postData = {\n        id: id,\n        title: title,\n        content: content,\n        imagePath: image,\n        creator: null\n      };\n    }\n\n    console.log('Update Post: ' + id);\n    this.http.put(\n      environment.backendUrl + 'posts/' + id, postData)\n    .subscribe(\n      // response => console.log(response)\n      response => {\n        this.router.navigate([\"/\"]);\n        console.log('Post Uddated!');\n      }\n    );\n  }\n\n  deletePost(postId: string) {\n    console.log('Post Delete: ' + postId);\n    return this.http.delete(\n      environment.backendUrl + 'posts/'+postId);\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { HeaderComponent } from './header/header.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AuthInterceptor } from './auth/auth-interceptor';\nimport { ErrorInterceptor } from './error-interceptor';\nimport { ErrorComponent } from './error/error.component';\nimport { AngularMaterialModule } from './angular-meterial.module';\nimport { PostsModule } from './posts/posts.module';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    ErrorComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    AngularMaterialModule,\n    PostsModule\n  ],\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true }\n  ],\n  bootstrap: [AppComponent],\n  entryComponents: [ErrorComponent]\n})\nexport class AppModule { }\n","<mat-toolbar color=\"primary\">\n  <h1>My MEAN Stack App</h1>\n  <span><a routerLink=\"/\">Posts</a></span>\n  <span class=\"spacer\"></span>  <ul>\n    <li *ngIf=\"userIsAuthenticated\">\n      <a mat-button routerLink=\"/create\" routerLinkActive=\"mat-accent\">New Post</a>\n    </li>\n    <li *ngIf=\"!userIsAuthenticated\">\n      <a mat-button routerLink=\"/auth/login\" routerLinkActive=\"mat-accent\">Login</a>\n    </li>\n    <li *ngIf=\"!userIsAuthenticated\">\n      <a mat-button routerLink=\"/auth/signup\" routerLinkActive=\"mat-accent\">Signup</a>\n    </li>\n    <li *ngIf=\"userIsAuthenticated\">\n      <button mat-button (click)=\"onLogout()\">Logout</button>\n    </li>\n  </ul>\n</mat-toolbar>\n\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { AuthService } from '../auth/auth.service';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit, OnDestroy {\n  userIsAuthenticated = false;\n  private authListenerSubs: Subscription;\n\n  constructor(private authService: AuthService) { }\n\n  ngOnInit(): void {\n    this.userIsAuthenticated = this.authService.getIsAuth();\n    this.authListenerSubs = this.authService\n    .getAuthStatusListener()\n    .subscribe(isAuthenticated => {\n      this.userIsAuthenticated = isAuthenticated;\n    });\n  }\n\n  onLogout() {\n    this.authService.logout();\n  }\n\n  ngOnDestroy() {\n    this.authListenerSubs.unsubscribe();\n  }\n\n}\n","import { AbstractControl } from \"@angular/forms\";\nimport { Observable, Observer, of } from \"rxjs\";\n\nexport const mimeType = (\n  control: AbstractControl\n): Promise<{ [key: string]: any }> | Observable<{ [key: string]: any }> => {\n  if (typeof(control.value) === 'string') {\n    return of(null);\n  }\n  const file = control.value as File;\n  const fileReader = new FileReader();\n  const frObs = Observable.create(\n    (observer: Observer<{ [key: string]: any }>) => {\n      fileReader.addEventListener(\"loadend\", () => {\n        const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(0, 4);\n        let header = \"\";\n        let isValid = false;\n        for (let i = 0; i < arr.length; i++) {\n          header += arr[i].toString(16);\n        }\n        switch (header) {\n          case \"89504e47\":\n            isValid = true;\n            break;\n          case \"ffd8ffe0\":\n          case \"ffd8ffe1\":\n          case \"ffd8ffe2\":\n          case \"ffd8ffe3\":\n          case \"ffd8ffe8\":\n            isValid = true;\n            break;\n          default:\n            isValid = false; // Or you can use the blob.type as fallback\n            break;\n        }\n        if (isValid) {\n          observer.next(null);\n        } else {\n          observer.next({ invalidMimeType: true });\n        }\n        observer.complete();\n      });\n      fileReader.readAsArrayBuffer(file);\n    }\n  );\n  return frObs;\n};\n","import { HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { AuthService } from \"./auth.service\";\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler ) {\n    const authToken = this.authService.getToken();\n    const authRequest = req.clone({\n      headers: req.headers.set('Authorization', \"Bearer \" + authToken)\n    });\n    return next.handle(authRequest);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { AuthData } from './auth-data.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private isAuthenticated = false;\n  private token;\n  private tokenTimer: NodeJS.Timer;\n  private userId: string;\n  private authStatusListener = new Subject<boolean>();\n\n  constructor(private http: HttpClient, private router: Router) { }\n\n  getToken() {\n    return this.token;\n  }\n  getIsAuth() {\n    return this.isAuthenticated;\n  }\n  getUserId() {\n    return this.userId;\n  }\n  getAuthStatusListener() {\n    return this.authStatusListener.asObservable();\n  }\n\n  createUser(email: string, password: string) {\n    const authData: AuthData = {email: email, password: password };\n    return this.http.post(environment.backendUrl + \"user/signup\", authData)\n      .subscribe(response => {\n        console.log(response);\n        this.router.navigate(['/']);\n      }, error => {\n        console.log(error);\n        this.authStatusListener.next(false);\n      });\n  }\n\n  login(email: string, password: string) {\n    const authData: AuthData = {email: email, password: password };\n    this.http.post<{token: string, expiresIn: number, userId: string}>(environment.backendUrl + \"user/login\", authData)\n    .subscribe(response => {\n      console.log(response);\n      const token = response.token;\n      this.token = token;\n      if (token) {\n        const expiresInDuration = response.expiresIn;\n        this.setAuthTimer(expiresInDuration);\n        this.isAuthenticated = true;\n        this.userId = response.userId;\n        this.authStatusListener.next(true);\n        const now = new Date();\n        const expirationDate = new Date(now.getTime() + expiresInDuration * 1000);\n        console.log(expirationDate);\n        this.saveAuthData(token, expirationDate, this.userId);\n        this.router.navigate(['/']);\n      }\n    }, error => {\n      this.authStatusListener.next(false);\n    });\n  }\n  autoAuthUser() {\n    const authInformation = this.getAuthData();\n    if (! authInformation) {\n      return;\n    }\n    const now = new Date();\n    const expiresIn = authInformation.expirationDate.getTime() - now.getTime();\n    console.log(authInformation, expiresIn);\n    if (expiresIn > 0) {\n      this.token = authInformation.token;\n      this.isAuthenticated = true;\n      this.userId = authInformation.userId;\n      this.setAuthTimer(expiresIn / 1000);\n      this.authStatusListener.next(true);\n    }\n  }\n\n  logout () {\n    this.token = null;\n    this.isAuthenticated = false;\n    this.authStatusListener.next(false);\n    this.userId = null;\n    clearTimeout(this.tokenTimer);\n    this.clearAuthData();\n    this.router.navigate(['/']);\n  }\n\n  private setAuthTimer(duration: number) {\n    console.log(\"Setting timer: \" + duration);\n    this.tokenTimer = setTimeout(() => {\n      this.logout();\n    }, duration * 1000);\n  }\n\n  private saveAuthData(token: string, expirationDate: Date, userId: string) {\n    localStorage.setItem('token', token);\n    localStorage.setItem('expiration', expirationDate.toISOString());\n    localStorage.setItem('userId', userId);\n  }\n  private clearAuthData() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expiration');\n    localStorage.removeItem('userId');\n  }\n  private getAuthData() {\n    const token = localStorage.getItem('token');\n    const expirationDate = localStorage.getItem('expiration');\n    const userId = localStorage.getItem('userId');\n\n    if (!token || !expirationDate) {\n      return;\n    }\n    return {\n      token: token,\n      expirationDate: new Date(expirationDate),\n      userId: userId\n    };\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatDialogModule } from '@angular/material/dialog';\n\n@NgModule({\n  exports: [\n    MatInputModule,\n    MatCardModule,\n    MatButtonModule,\n    MatToolbarModule,\n    MatExpansionModule,\n    MatProgressSpinnerModule,\n    MatPaginatorModule,\n    MatDialogModule\n  ]\n})\nexport class AngularMaterialModule {}\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { AuthGuard } from \"./auth/auth.guard\";\nimport { PostCreateComponent } from \"./posts/post-create/post-create.component\";\nimport { PostListComponent } from \"./posts/post-list/post-list.component\";\n\nconst routes: Routes = [\n  { path: '', component: PostListComponent },\n  { path: 'create', component: PostCreateComponent, canActivate: [AuthGuard] },\n  { path: 'edit/:postId', component: PostCreateComponent, canActivate: [AuthGuard] },\n//  { path: 'auth', loadChildren: \"./auth/auth.module#AuthModule\"} // Old style not working\n  { path: 'auth', loadChildren: () => import(\"./auth/auth.module\").then(m => m.AuthModule)}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n  providers: [AuthGuard]\n})\nexport class AppRoutingModule {\n\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, ParamMap } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { AuthService } from 'src/app/auth/auth.service';\nimport { Post } from '../post.model';\nimport { PostsService } from '../posts.service';\nimport { mimeType } from './mime-type.validator';\n\n@Component({\n  selector: 'app-post-create',\n  templateUrl: './post-create.component.html',\n  styleUrls: ['./post-create.component.css']\n})\nexport class PostCreateComponent implements OnInit, OnDestroy {\n  enteredTitle = '';\n  enteredContent = '';\n  post: Post;\n  isloading = false;\n  form: FormGroup;\n  imagePreview: string;\n  private mode = 'create';\n  private postId: string;\n  private authStatusSub: Subscription;\n\n  constructor(public postService: PostsService,\n              public route: ActivatedRoute,\n              public authService: AuthService) { }\n\n  ngOnInit(): void {\n    this.authStatusSub = this.authService.getAuthStatusListener().subscribe(\n      authStatus => {\n        this.isloading = false;\n      }\n    );\n    this.form = new FormGroup({\n      'title': new FormControl(null, {\n        validators: [Validators.required, Validators.minLength(3)]\n      }),\n      'content': new FormControl(null, {\n        validators: [Validators.required]\n      }),\n      'image': new FormControl(null, {\n        validators: [Validators.required],\n        asyncValidators: [mimeType]\n      })\n    });\n    this.route.paramMap.subscribe((paramMap: ParamMap) => {\n      if (paramMap.has('postId'))\n      {\n        this.mode = 'edit';\n        this.postId = paramMap.get('postId');\n        this.isloading = true;\n        // Sleep just for fun to show spinner:)\n        // setTimeout(() => {\n        //   console.log('sleep');\n          this.postService.getPost(this.postId).subscribe(postData => {\n            this.isloading = false;\n            this.post = {\n              id: postData._id,\n              title: postData.title,\n              content: postData.content,\n              imagePath: postData.imagePath,\n              creator: postData.creator\n            };\n            this.form.setValue({\n              'title': this.post.title,\n              'content': this.post.content,\n              'image': this.post.imagePath\n            });\n            console.log('Post edit: ' + this.postId);\n          });\n        // }, 250);\n      }\n      else {\n        this.mode = 'create';\n        this.postId = null;\n        console.log('Post create');\n      }\n    });\n  }\n\n  onImagePicked(event: Event) {\n    const file = (event.target as HTMLInputElement).files[0];\n    this.form.patchValue({image: file});\n    this.form.get('image').updateValueAndValidity();\n\n    console.log(file);\n    const reader = new FileReader();\n    reader.onload = () => {\n      this.imagePreview = reader.result as string;\n    };\n    reader.readAsDataURL(file);\n  }\n\n  onSavePost() {\n    if (this.form.invalid) {\n      return;\n    }\n    console.log(\"Save post: \" + this.form.value.title);\n    this.isloading = true;\n    if (this.mode === 'create') {\n      this.postService.addPost(\n        this.form.value.title,\n        this.form.value.content,\n        this.form.value.image\n      );\n    }\n    else {\n      // Update do not when sleeping??? :(\n      // setTimeout(() => {\n      //   console.log('sleep');\n        this.postService.updatePost(\n          this.postId,\n          this.form.value.title,\n          this.form.value.content,\n          this.form.value.image\n        );\n      // }, 200);\n    }\n    this.form.reset();\n  }\n\n  ngOnDestroy() {\n    this.authStatusSub.unsubscribe();\n  }\n}\n","<h2>Create post</h2>\n<!-- <textarea rows=\"6\" [value]=\"newPost\" #postInput></textarea> -->\n<mat-card>\n  <mat-spinner *ngIf=\"isloading\"></mat-spinner>\n  <form [formGroup]=\"form\" (submit)=\"onSavePost()\" *ngIf=\"!isloading\">\n    <mat-form-field>\n      <input matInput\n        type=\"text\"\n        formControlName=\"title\"\n         placeholder=\"Post Title\"\n        >\n        <mat-error *ngIf=\"form.get('title').invalid\">Please enter a valid title!</mat-error>\n    </mat-form-field>\n    <div>\n      <button mat-stroked-button type=\"button\" (click)=\"filePicker.click()\">Pick Image</button>\n      <input type=\"file\" #filePicker (change)=\"onImagePicked($event)\">\n    </div>\n    <div class=\"image-preview\"\n    *ngIf=\"imagePreview !== '' &&\n    imagePreview !== null &&\n    form.get('image').valid &&\n    mode !== 'edit'\">\n      <img [src]=\"imagePreview\" [alt]=\"form.value.title\">\n    </div>\n    <mat-form-field>\n      <textarea matInput rows=\"4\"\n        formControlName=\"content\"\n        placeholder=\"Post Content\"\n        ></textarea>\n        <mat-error *ngIf=\"form.get('content').invalid\">Please enter valid content!</mat-error>\n    </mat-form-field>\n    <button\n      mat-raised-button\n      color=\"accent\"\n      type=\"submit\">\n        Save Post\n    </button>\n  </form>\n</mat-card>\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}